<?php


class Model {

    protected $properties; 
    protected $_id;
    protected $autogenerated;
    protected static $tables;
    protected static $_sid;

    public function __construct(){

        $this->getTableDesc();

        $temp = [];
        foreach($this->properties as $property){
            $temp[$property] = null;
        }
        $this->properties = $temp;


    }

    // "magic" get and set

    public function __set($property, $value){
        return $this->properties[$property] = $value;
      }
  
    public function __get($property){
    return array_key_exists($property, $this->properties)
        ? $this->properties[$property]
        : null
    ;
    }

    public function getArray(){
        $u = [];
        foreach($this->properties as $prop => $val){
            $u[$prop] = $this->$prop;
        }
        return $u;
    }


    public function delete(){
        

        $sql = "DELETE FROM ".$this->table." WHERE ".$this->_id." = ?";
        $uniqueval = $this->{$this->_id};
        if(is_string($uniqueval)){
            $typeU = "s";
        } else {
            $typeU = "i";
        }
        $stmt = DB::conn()->link->prepare($sql);
        $stmt->bind_param($typeU, $uniqueval);
        $stmt->execute();

        foreach($this->properties as $prop => $val){
            $this->$prop = null;
        }
    }

    public function save(){
        
        $row = null;

        if($this->{$this->_id} != null){
            $sql = "SELECT ".$this->_id." from ".$this->table." where ".$this->_id." = ?";
            $uniqueval = $this->{$this->_id};
            if(is_string($uniqueval)){
                $typeU = "s";
            } else {
                $typeU = "i";
            }
            $stmt = DB::conn()->link->prepare($sql);
            $stmt->bind_param($typeU, $uniqueval);
            $stmt->execute();
            $result = $stmt->get_result();
            $row = $result->fetch_assoc();
        }
        

        if($row == null){

            $this->{$this->_id} = $this->guidv4();
            // insert
            $types = "";
            $query = 'INSERT INTO '.$this->table.' (';
            $x=0;
            foreach($this->properties as $prop => $val){
                if(!isset($this->autogenerated[$prop])){
                    if($x>0){
                        $query .= ", ";
                    }
                    $query .= $prop;
                    $x++;
                }
            }
            $query .= ')';
            $query .= ' VALUES (';
                for($x=0;$x < count($this->properties)-count($this->autogenerated); $x++){
                    if($x>0){
                        $query .= ",";
                    }
                    $query .= " ? ";
                }
            
            $query .=')';

            $values = [];
            foreach($this->properties as $prop => $val){
                if(!isset($this->autogenerated[$prop])){
                    $values[] = $this->$prop;
                    if(is_string($this->$prop)){
                        $types .= "s";
                    } else {
                        $types .= "i";
                    }
                }
            }

            
            $stmt = DB::conn()->link->prepare($query);
            $stmt->bind_param($types, ...$values);
            $stmt->execute();
                     


        } else {
            // update
            $types = "";
            $sql = "UPDATE ".$this->table." ";
            $sql .= "SET ";
            $x=0;
            foreach($this->properties as $prop => $val){
                if(!isset($this->autogenerated[$prop])){
                    if($x>0){
                        $sql .= ", ";
                    }
                    $sql .= $prop." = ? ";
                    $x++;
                }
            }
            $sql .= "WHERE ".$this->_id." = ?";

            $values = [];
            foreach($this->properties as $prop => $val){
                if(!isset($this->autogenerated[$prop])){
                    $values[] = $this->$prop;
                    if(is_string($this->$prop)){
                        $types .= "s";
                    } else {
                        $types .= "i";
                    }
                }
            }
            $values[] = $this->{$this->_id};
            $types .= "s";
            $stmt = DB::conn()->link->prepare($sql);
            $stmt->bind_param($types, ...$values);
            $stmt->execute();
        }


    }

    public static function get($uid){
        

        self::getTableDescStatic();

        $sql = "SELECT * FROM ".static::$tables." WHERE ".self::$_sid." = ?";
        $types = "s";
        $values = [];
        $values[] = $uid;
        $stmt = DB::conn()->link->prepare($sql);
        $stmt->bind_param($types, ...$values);
        $stmt->execute();
        $result = $stmt->get_result();
        $row = $result->fetch_assoc();

        $return = null;


        $childClass = static::class;
        foreach ($result as $row) {
            $return = new $childClass;
            foreach($row as $var => $val){
                $return->$var = $val;
            }
        }

        return $return;
    }

    // $argv ex: ["name =", $name], ["lastname like", $like, "and"], ["email = ", $email, "or"]

    public static function getWhere($argv, $limit = null, $order = null){
        $sql = "SELECT * FROM ".static::$tables." WHERE ";

        $types = "";
        $values = [];
        foreach($argv as $arg){
            if(isset($arg[2])){
                $sql .= " ".$arg[2]." ";
            }
            $sql .= " ".$arg[0]." ? ";
            $values[] = $arg[1];
            if(is_string($arg[1])){
                $types .= "s";
            } else {
                $types .= "i";
            }
        }
        if($order !== null){
            $sql .= " ORDER BY ".$order;
        }
        if($limit !== null){
            $sql .= " LIMIT ".$limit;

        }

        $stmt = DB::conn()->link->prepare($sql);
        $stmt->bind_param($types, ...$values);
        $stmt->execute();
        $result = $stmt->get_result();
        $row = $result->fetch_assoc();

        $return = [];
        $childClass = static::class;
        foreach ($result as $row) {
            $ret = new $childClass;
            foreach($row as $var => $val){
                $ret->$var = $val;
            }
            $return[] = $ret;
        }

        return $return;

    }
   

    // generates a json file with the needed description of the table. And set property values for NON STATIC calls
    
    public function getTableDesc(){
        
        $desc = @file_get_contents(__DIR__."/../database/descriptions/".$this->table.".json");

        if($desc === false){
            // no existe desc, crearla

            $sql = "DESCRIBE ".$this->table;
            $descripton = DB::conn()->link->query($sql);
            
            $doc = ["properties"=>[], "_id" => "", "autogenerated" => []];
            
            while ($row = $descripton->fetch_assoc()) {
                $doc['properties'][] = $row['Field'];
                if($row['Key'] == "PRI"){
                    $doc['_id'] = $row['Field'];
                }
                if($row['Extra'] == "DEFAULT_GENERATED"){
                    $doc['autogenerated'][$row['Field']] = 1;
                }
            }

            file_put_contents(__DIR__."/../database/descriptions/".$this->table.".json", json_encode($doc));


        } else {
            $doc = json_decode($desc, true);
        }

        $this->properties = $doc['properties'];
        $this->_id = $doc['_id'];
        $this->autogenerated = $doc['autogenerated'];
        

    }

    // generates a json file with the needed description of the table. And set property values for STATIC calls


    private static function getTableDescStatic(){
        

        $desc = @file_get_contents(__DIR__."/../database/descriptions/".static::$tables.".json");

        if($desc === false){
            // no existe desc, crearla

            $sql = "DESCRIBE ".static::$tables;
            $descripton = DB::conn()->link->query($sql);
            
            $doc = ["properties"=>[], "_id" => "", "autogenerated" => []];
            
            while ($row = $descripton->fetch_assoc()) {
                $doc['properties'][] = $row['Field'];
                if($row['Key'] == "PRI"){
                    $doc['_id'] = $row['Field'];
                }
                if($row['Extra'] == "DEFAULT_GENERATED"){
                    $doc['autogenerated'][$row['Field']] = 1;
                }
            }

            file_put_contents(__DIR__."/../database/descriptions/".static::$tables.".json", json_encode($doc));


        } else {
            $doc = json_decode($desc, true);
        }

        self::$_sid = $doc['_id'];
    }


    public function guidv4() {
        // Generate 16 bytes (128 bits) of random data or use the data passed into the function.
        $data = random_bytes(16);
        assert(strlen($data) == 16);
    
        // Set version to 0100
        $data[6] = chr(ord($data[6]) & 0x0f | 0x40);
        // Set bits 6-7 to 10
        $data[8] = chr(ord($data[8]) & 0x3f | 0x80);
    
        // Output the 36 character UUID.
        return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));
    }


    

}